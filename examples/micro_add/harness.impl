#include <iostream>
#include <string>
#include <fstream>
#include <cmath>
#include "example_utils.hpp"

#define ATTN_B 1
#define ATTN_N 16
#define ATTN_D 32

int main(int argc, char **argv) {
    // create dummy variables that are the right size
    constexpr int TOTAL_ELEMENTS_X = ATTN_B*ATTN_N*ATTN_D;
    constexpr int TOTAL_ELEMENTS_O = ATTN_B*ATTN_N*ATTN_N;
    float *x     = new float[TOTAL_ELEMENTS_X];
    float *o     = new float[TOTAL_ELEMENTS_O];
    float *o_ref = new float[TOTAL_ELEMENTS_O];

    if(argc > 1) {
        std::ifstream infile(argv[1]);
        for(int i = 0; i < TOTAL_ELEMENTS_X; i++) {   infile >> x[i];    }
        for(int i = 0; i < TOTAL_ELEMENTS_O; i++) {   infile >> o_ref[i];  }
        std::cout << "Finished loading file from " << argv[1] << "!" << std::endl;
    } else {
        for (int i = 0; i < TOTAL_ELEMENTS_X; i++) { x[i] = 1.5f; }
        for (int i = 0; i < TOTAL_ELEMENTS_O; i++) { o_ref[i] = 3.0f; }
        std::cout << "Finished setting default values" << std::endl;
    }

    // set the inputs
    float *d_x, *d_o;
    HIP_CHECK(hipMalloc(&d_x, TOTAL_ELEMENTS_X * sizeof(float)));
    HIP_CHECK(hipMalloc(&d_o, TOTAL_ELEMENTS_O * sizeof(float)));
    HIP_CHECK(hipMemcpy(d_x, x, TOTAL_ELEMENTS_X * sizeof(float), hipMemcpyHostToDevice));
    HIP_CHECK(hipMemcpy(d_o, o, TOTAL_ELEMENTS_O * sizeof(float), hipMemcpyHostToDevice));

    std::cout << "Starting kernel\n";
    hipDeviceSynchronize();
    dispatch_micro( d_x, d_o ); 
    hipDeviceSynchronize();
    std::cout << "Finished kernel\n";
    
    // check correctness
    HIP_CHECK(hipMemcpy(o, d_o, TOTAL_ELEMENTS_O * sizeof(float), hipMemcpyDeviceToHost));
    bool good = true;
    std::ofstream o_ref_file("printouts/o_ref.txt");
    std::ofstream o_file("printouts/o.txt");
    std::ofstream diff_file("printouts/diff.txt");
    std::cout << "Total elements: " << TOTAL_ELEMENTS_O << std::endl;
    for(int i = 0; i < TOTAL_ELEMENTS_O; i++) {
        float diff = o[i] - o_ref[i];
        if(i < TOTAL_ELEMENTS_O) {
            o_ref_file << o_ref[i] << ' ';
            o_file << o[i] << ' ';
            diff_file << diff << ' ';
            if (i % 16 == 15) {
                o_ref_file << std::endl;
                o_file << std::endl;
                diff_file << std::endl;
            }
        }
        if(std::abs(diff) > 0.1 || std::isnan(diff)) {
            if (good == true) { 
                printf("i: %d, pred: %f, ref: %f, diff: %f\n", i, o[i], o_ref[i], diff);
            }
            good = false;
        }
    }
    if(good) std::cout << "Correct out :)\n";
    else std::cout << "Incorrect out :(\n";

    HIP_CHECK(hipFree(d_x));
    HIP_CHECK(hipFree(d_o));
    delete[] x, o, o_ref;
    return 0;
}